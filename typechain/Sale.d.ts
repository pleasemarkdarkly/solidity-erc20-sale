/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SaleInterface extends ethers.utils.Interface {
  functions: {
    "ETHWallet()": FunctionFragment;
    "EXCHANGE_RATE()": FunctionFragment;
    "TOTAL_SUPPLY()": FunctionFragment;
    "Token()": FunctionFragment;
    "changeCreator(address)": FunctionFragment;
    "changeTransferStats(bool)": FunctionFragment;
    "closeSale()": FunctionFragment;
    "contribute()": FunctionFragment;
    "creator()": FunctionFragment;
    "endBlock()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "getHeldCoin(address)": FunctionFragment;
    "heldTimeline(address)": FunctionFragment;
    "heldTokens(address)": FunctionFragment;
    "heldTotal()": FunctionFragment;
    "isFunding()": FunctionFragment;
    "maxMintable()": FunctionFragment;
    "releaseHeldCoins()": FunctionFragment;
    "setup(address,uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalMinted()": FunctionFragment;
    "updateRate(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ETHWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransferStats",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "closeSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHeldCoin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "heldTimeline",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "heldTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "heldTotal", values?: undefined): string;
  encodeFunctionData(functionFragment: "isFunding", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHeldCoins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ETHWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTransferStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHeldCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "heldTimeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heldTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heldTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFunding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHeldCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRate", data: BytesLike): Result;

  events: {
    "Contribution(address,uint256)": EventFragment;
    "ReleaseTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseTokens"): EventFragment;
}

export class Sale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SaleInterface;

  functions: {
    ETHWallet(overrides?: CallOverrides): Promise<[string]>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    Token(overrides?: CallOverrides): Promise<[string]>;

    changeCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHeldCoin(
      _address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    heldTimeline(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    heldTokens(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    heldTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    isFunding(overrides?: CallOverrides): Promise<[boolean]>;

    maxMintable(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseHeldCoins(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setup(
      tokenAddress: string,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETHWallet(overrides?: CallOverrides): Promise<string>;

  EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  Token(overrides?: CallOverrides): Promise<string>;

  changeCreator(
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTransferStats(
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contribute(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getHeldCoin(
    _address: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  heldTimeline(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  heldTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  heldTotal(overrides?: CallOverrides): Promise<BigNumber>;

  isFunding(overrides?: CallOverrides): Promise<boolean>;

  maxMintable(overrides?: CallOverrides): Promise<BigNumber>;

  releaseHeldCoins(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setup(
    tokenAddress: string,
    _endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  updateRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHWallet(overrides?: CallOverrides): Promise<string>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    Token(overrides?: CallOverrides): Promise<string>;

    changeCreator(_creator: string, overrides?: CallOverrides): Promise<void>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    closeSale(overrides?: CallOverrides): Promise<void>;

    contribute(overrides?: CallOverrides): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getHeldCoin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTimeline(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    heldTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    heldTotal(overrides?: CallOverrides): Promise<BigNumber>;

    isFunding(overrides?: CallOverrides): Promise<boolean>;

    maxMintable(overrides?: CallOverrides): Promise<BigNumber>;

    releaseHeldCoins(overrides?: CallOverrides): Promise<void>;

    setup(
      tokenAddress: string,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    updateRate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Contribution(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    ReleaseTokens(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    ETHWallet(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    Token(overrides?: CallOverrides): Promise<BigNumber>;

    changeCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getHeldCoin(
      _address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    heldTimeline(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    heldTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    heldTotal(overrides?: CallOverrides): Promise<BigNumber>;

    isFunding(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintable(overrides?: CallOverrides): Promise<BigNumber>;

    releaseHeldCoins(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setup(
      tokenAddress: string,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    updateRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHeldCoin(
      _address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    heldTimeline(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heldTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heldTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseHeldCoins(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      tokenAddress: string,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
