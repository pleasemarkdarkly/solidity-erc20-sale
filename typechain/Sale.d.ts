/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SaleInterface extends ethers.utils.Interface {
  functions: {
    "ETHWallet()": FunctionFragment;
    "EXCHANGE_RATE()": FunctionFragment;
    "TOTAL_SUPPLY()": FunctionFragment;
    "Token()": FunctionFragment;
    "changeCreator(address)": FunctionFragment;
    "changeTransferStats(bool)": FunctionFragment;
    "closeSale()": FunctionFragment;
    "contribute()": FunctionFragment;
    "creator()": FunctionFragment;
    "endBlock()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "getHeldCoin(address)": FunctionFragment;
    "heldTimeline(address)": FunctionFragment;
    "heldTokens(address)": FunctionFragment;
    "heldTotal()": FunctionFragment;
    "isFunding()": FunctionFragment;
    "maxMintable()": FunctionFragment;
    "releaseHeldCoins()": FunctionFragment;
    "setup(address,uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalMinted()": FunctionFragment;
    "updateRate(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ETHWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransferStats",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "closeSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHeldCoin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "heldTimeline",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "heldTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "heldTotal", values?: undefined): string;
  encodeFunctionData(functionFragment: "isFunding", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHeldCoins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ETHWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTransferStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHeldCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "heldTimeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heldTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heldTotal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFunding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHeldCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRate", data: BytesLike): Result;

  events: {
    "Contribution(address,uint256)": EventFragment;
    "ReleaseTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseTokens"): EventFragment;
}

export class Sale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SaleInterface;

  functions: {
    ETHWallet(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ETHWallet()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    EXCHANGE_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "EXCHANGE_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    TOTAL_SUPPLY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "TOTAL_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    Token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "Token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    changeCreator(
      _creator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeCreator(address)"(
      _creator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeTransferStats(bool)"(
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeSale(overrides?: Overrides): Promise<ContractTransaction>;

    "closeSale()"(overrides?: Overrides): Promise<ContractTransaction>;

    contribute(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "contribute()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    creator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "creator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    endBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "endBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    exchangeRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "exchangeRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getHeldCoin(
      _address: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "getHeldCoin(address)"(
      _address: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    heldTimeline(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "heldTimeline(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    heldTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "heldTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    heldTotal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "heldTotal()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isFunding(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isFunding()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    maxMintable(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxMintable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    releaseHeldCoins(overrides?: Overrides): Promise<ContractTransaction>;

    "releaseHeldCoins()"(overrides?: Overrides): Promise<ContractTransaction>;

    setup(
      token_address: string,
      end_block: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setup(address,uint256)"(
      token_address: string,
      end_block: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalMinted(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalMinted()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updateRate(
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ETHWallet(overrides?: CallOverrides): Promise<string>;

  "ETHWallet()"(overrides?: CallOverrides): Promise<string>;

  EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "EXCHANGE_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  Token(overrides?: CallOverrides): Promise<string>;

  "Token()"(overrides?: CallOverrides): Promise<string>;

  changeCreator(
    _creator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeCreator(address)"(
    _creator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeTransferStats(
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeTransferStats(bool)"(
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeSale(overrides?: Overrides): Promise<ContractTransaction>;

  "closeSale()"(overrides?: Overrides): Promise<ContractTransaction>;

  contribute(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "contribute()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  "creator()"(overrides?: CallOverrides): Promise<string>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getHeldCoin(
    _address: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "getHeldCoin(address)"(
    _address: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  heldTimeline(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "heldTimeline(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  heldTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "heldTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  heldTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "heldTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  isFunding(overrides?: CallOverrides): Promise<boolean>;

  "isFunding()"(overrides?: CallOverrides): Promise<boolean>;

  maxMintable(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMintable()"(overrides?: CallOverrides): Promise<BigNumber>;

  releaseHeldCoins(overrides?: Overrides): Promise<ContractTransaction>;

  "releaseHeldCoins()"(overrides?: Overrides): Promise<ContractTransaction>;

  setup(
    token_address: string,
    end_block: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setup(address,uint256)"(
    token_address: string,
    end_block: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  "totalMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateRate(
    rate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRate(uint256)"(
    rate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHWallet(overrides?: CallOverrides): Promise<string>;

    "ETHWallet()"(overrides?: CallOverrides): Promise<string>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "EXCHANGE_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    Token(overrides?: CallOverrides): Promise<string>;

    "Token()"(overrides?: CallOverrides): Promise<string>;

    changeCreator(_creator: string, overrides?: CallOverrides): Promise<void>;

    "changeCreator(address)"(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeTransferStats(bool)"(
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    closeSale(overrides?: CallOverrides): Promise<void>;

    "closeSale()"(overrides?: CallOverrides): Promise<void>;

    contribute(overrides?: CallOverrides): Promise<void>;

    "contribute()"(overrides?: CallOverrides): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    "creator()"(overrides?: CallOverrides): Promise<string>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHeldCoin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHeldCoin(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTimeline(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "heldTimeline(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "heldTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "heldTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFunding(overrides?: CallOverrides): Promise<boolean>;

    "isFunding()"(overrides?: CallOverrides): Promise<boolean>;

    maxMintable(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintable()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseHeldCoins(overrides?: CallOverrides): Promise<void>;

    "releaseHeldCoins()"(overrides?: CallOverrides): Promise<void>;

    setup(
      token_address: string,
      end_block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setup(address,uint256)"(
      token_address: string,
      end_block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateRate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updateRate(uint256)"(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Contribution(from: null, amount: null): EventFilter;

    ReleaseTokens(from: null, amount: null): EventFilter;
  };

  estimateGas: {
    ETHWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "ETHWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "EXCHANGE_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    Token(overrides?: CallOverrides): Promise<BigNumber>;

    "Token()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeCreator(_creator: string, overrides?: Overrides): Promise<BigNumber>;

    "changeCreator(address)"(
      _creator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeTransferStats(bool)"(
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeSale(overrides?: Overrides): Promise<BigNumber>;

    "closeSale()"(overrides?: Overrides): Promise<BigNumber>;

    contribute(overrides?: PayableOverrides): Promise<BigNumber>;

    "contribute()"(overrides?: PayableOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    "creator()"(overrides?: CallOverrides): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "endBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHeldCoin(
      _address: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "getHeldCoin(address)"(
      _address: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    heldTimeline(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "heldTimeline(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "heldTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heldTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "heldTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFunding(overrides?: CallOverrides): Promise<BigNumber>;

    "isFunding()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintable(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMintable()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseHeldCoins(overrides?: Overrides): Promise<BigNumber>;

    "releaseHeldCoins()"(overrides?: Overrides): Promise<BigNumber>;

    setup(
      token_address: string,
      end_block: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setup(address,uint256)"(
      token_address: string,
      end_block: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateRate(rate: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updateRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETHWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXCHANGE_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EXCHANGE_RATE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "Token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeCreator(
      _creator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeCreator(address)"(
      _creator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeTransferStats(
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeTransferStats(bool)"(
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeSale(overrides?: Overrides): Promise<PopulatedTransaction>;

    "closeSale()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    contribute(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "contribute()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHeldCoin(
      _address: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "getHeldCoin(address)"(
      _address: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    heldTimeline(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "heldTimeline(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heldTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "heldTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heldTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "heldTotal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFunding()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxMintable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseHeldCoins(overrides?: Overrides): Promise<PopulatedTransaction>;

    "releaseHeldCoins()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setup(
      token_address: string,
      end_block: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setup(address,uint256)"(
      token_address: string,
      end_block: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalMinted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRate(
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRate(uint256)"(
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
